import os
import json
import random
import traceback
import requests
import pickle
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from collections import defaultdict
import hashlib
from typing import Optional, Dict, Any, List, Union
from llama_cpp import Llama
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

# Cargar intents.json
def cargar_intents() -> Dict[str, Any]:
    """Carga el archivo de intenciones desde intents.json"""
    try:
        intents_path = os.path.join(os.path.dirname(__file__), 'intents.json')
        with open(intents_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error al cargar intents.json: {str(e)}")
        return {"intents": []}

# Cargar la informaci√≥n de la empresa desde intents.json
def cargar_info_empresa() -> Dict[str, Any]:
    """Extrae la informaci√≥n de la empresa de las intenciones"""
    try:
        intents = cargar_intents()
        empresa_info = {
            'nombre': 'Emenet',
            'horario_atencion': 'Lunes a Domingo, 8:00 AM - 10:00 PM',
            'contacto': {
                'telefono': '729 179 2524',
                'email': 'soporte@emenet.com.mx',
                'soporte_tecnico': 'soporte@emenet.com.mx'
            }
        }
        
        # Buscar informaci√≥n en las intenciones
        for intent in intents.get('intents', []):
            if intent.get('tag') == 'horario_atencion' and intent.get('responses'):
                empresa_info['horario_atencion'] = intent['responses'][0].split('\n')[0]
                break
                
        return empresa_info
    except Exception as e:
        logger.error(f"Error al cargar informaci√≥n de la empresa: {str(e)}")
        return {
            'nombre': 'Emenet',
            'horario_atencion': 'Lunes a Domingo, 8:00 AM - 10:00 PM',
            'contacto': {
                'telefono': '729 179 2524',
                'email': 'soporte@emenet.com.mx',
                'soporte_tecnico': 'soporte@emenet.com.mx'
            }
        }

# Configuraci√≥n por defecto del modelo
DEFAULT_MODEL_DIR = os.path.expanduser("~/.lmstudio/models/bartowski/Llama-3.2-1B-Instruct-GGUF")
DEFAULT_MODEL_FILENAME = "Llama-3.2-1B-Instruct-f16.gguf"

class LLMHandler:
    def __init__(self, model_path: str):
        """
        Inicializa el modelo Llama con la ruta al archivo GGUF.
        
        Args:
            model_path (str): Ruta al archivo .gguf del modelo
        """
        self.model = None
        self.model_path = model_path
        self.context_window = 4096  # Tama√±o de ventana de contexto
        self.max_tokens = 512      # M√°ximo de tokens a generar
        self.temperature = 0.7     # Controla la aleatoriedad (0.0 a 1.0)
        self.top_p = 0.9           # Muestreo de n√∫cleo (nucleus sampling)
        self.top_k = 40            # Top-k sampling
        
    def load_model(self):
        """Carga el modelo en memoria"""
        try:
            logger.info(f"Cargando modelo desde: {self.model_path}")
            self.model = Llama(
                model_path=self.model_path,
                n_ctx=self.context_window,
                n_threads=4,  # Ajusta seg√∫n los n√∫cleos de tu CPU
                n_gpu_layers=0  # 0 para usar solo CPU, ajusta si tienes GPU compatible
            )
            logger.info("Modelo cargado exitosamente")
            return True
        except Exception as e:
            logger.error(f"Error al cargar el modelo: {str(e)}")
            return False
    
    def generate_response(self, prompt: str, system_prompt: Optional[str] = None, use_streaming: bool = False) -> str:
        """
        Genera una respuesta a partir del prompt dado.
        
        Args:
            prompt (str): El mensaje del usuario
            system_prompt (str, optional): Instrucciones del sistema. Por defecto es None.
            use_streaming (bool, optional): Si es True, usa streaming para la generaci√≥n. Por defecto es False.
            
        Returns:
            str: La respuesta generada por el modelo o un mensaje de error
        """
        if not self.model:
            if not self.load_model():
                return "Lo siento, no pude cargar el modelo de lenguaje."
        
        try:
            # Construir el mensaje completo con instrucciones del sistema si se proporcionan
            messages = []
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            
            messages.append({"role": "user", "content": prompt})
            
            # Configuraci√≥n com√∫n para la generaci√≥n
            gen_params = {
                "messages": messages,
                "max_tokens": self.max_tokens,
                "temperature": self.temperature,
                "top_p": self.top_p,
                "top_k": self.top_k,
                "stop": ["</s>", "<|endoftext|"]
            }
            
            # Generar respuesta (con o sin streaming)
            if use_streaming:
                response = self.model.create_chat_completion(
                    **gen_params,
                    stream=True
                )
                
                # Construir la respuesta final a partir del stream
                final_response = ""
                for chunk in response:
                    if "choices" in chunk and len(chunk["choices"]) > 0:
                        delta = chunk["choices"][0].get("delta", {})
                        if "content" in delta:
                            final_response += delta["content"]
                
                return final_response if final_response else "No se pudo generar una respuesta. Por favor, int√©ntalo de nuevo."
            else:
                # Generaci√≥n sin streaming
                response = self.model.create_chat_completion(
                    **gen_params,
                    stream=False
                )
                
                # Extraer la respuesta del formato de la API
                if "choices" in response and len(response["choices"]) > 0:
                    return response["choices"][0].get("message", {}).get("content", "No se pudo generar una respuesta.")
                else:
                    return "No se pudo generar una respuesta. Por favor, int√©ntalo de nuevo."
                    
        except Exception as e:
            error_msg = f"Error al generar respuesta: {str(e)}"
            logger.error(f"{error_msg}\n{traceback.format_exc()}")
            return "Lo siento, hubo un error al generar la respuesta. Por favor, int√©ntalo de nuevo m√°s tarde."
    
    def get_response(self, user_message: str, system_prompt: Optional[str] = None, use_streaming: bool = False) -> str:
        """
        Obtiene una respuesta para el mensaje del usuario.
        
        Args:
            user_message (str): Mensaje del usuario
            system_prompt (str, optional): Instrucciones del sistema. Si es None, se usa el prompt por defecto.
            use_streaming (bool, optional): Si es True, usa streaming para la generaci√≥n. Por defecto es False.
            
        Returns:
            str: Respuesta generada o mensaje de error
        """
        if not user_message or not isinstance(user_message, str):
            return "Por favor, proporciona un mensaje v√°lido."
            
        try:
            # Si no se proporciona un system_prompt, usar uno por defecto
            if system_prompt is None:
                system_prompt = (
                    "Eres un asistente de atenci√≥n al cliente de una empresa de telecomunicaciones. "
                    "Responde de manera amable, concisa y profesional. Si no sabes la respuesta, "
                    "ofrece contactar con un agente humano. "
                    "Las respuestas deben ser breves y directas, de 1-3 oraciones como m√°ximo."
                )
                
            # Usar el modo sin streaming por defecto (m√°s confiable)
            logger.info(f"Generando respuesta para: {user_message[:100]}...")
            
            message_lower = user_message.lower()
            
            # Manejar consultas sobre horarios de atenci√≥n
            if any(palabra in message_lower for palabra in ['horario', 'horarios', 'atenci√≥n', 'atencion', 'abierto', 'cierran', 'abren', 'disponible', 'oficina', 'sucursal']):
                return _obtener_horarios_atencion()
            
            # Manejar consultas sobre emergencias
            if any(palabra in message_lower for palabra in ['emergencia', 'urgencia', 'falla grave', 'problema urgente', 'fuera de horario']):
                return (
                    "üö® *Soporte de Emergencia 24/7* üö®\r\n\r\n"
                    "Para reportar una emergencia t√©cnica fuera del horario de atenci√≥n, comun√≠cate a:\r\n\r\n"
                    "üìû *Tel√©fono de Emergencias*: 55-9999-8888\r\n\r\n"
                    "*Nota*: Este servicio est√° disponible las 24 horas solo para:\r\n"
                    "‚Ä¢ Fallas totales del servicio\r\n"
                    "‚Ä¢ Problemas cr√≠ticos que afecten a m√∫ltiples usuarios\r\n"
                    "‚Ä¢ Situaciones de seguridad\r\n\r\n"
                    "Para consultas generales, te atenderemos en nuestro horario habitual de atenci√≥n. üòä"
                )
            
            # Manejar consultas sobre pagos
            if any(palabra in message_lower for palabra in ['pago', 'pagar', 'factura', 'recibo', 'vencimiento']):
                return (
                    "üí≥ *Informaci√≥n de Pagos* üí≥\r\n\r\n"
                    "Puedes realizar tus pagos de las siguientes formas:\r\n\r\n"
                    "1. *Transferencia bancaria* (Disponible 24/7)\r\n"
                    "2. *Dep√≥sito en ventanilla* (En horario bancario)\r\n"
                    "3. *Pago en l√≠nea* a trav√©s de nuestra p√°gina web\r\n\r\n"
                    "üìÖ *Fechas de pago*:\r\n"
                    "‚Ä¢ Facturaci√≥n: Del 1ro al 5 de cada mes\r\n"
                    "¬øNecesitas ayuda con alg√∫n pago en espec√≠fico?"
                )
            
            # Usar el modelo de lenguaje para otras consultas
            try:
                # Crear un prompt para el modelo de lenguaje
                prompt = f"""Eres un asistente virtual de Emenet, una empresa de telecomunicaciones. 
                Responde de manera amable y profesional. Si no est√°s seguro de algo, pide m√°s informaci√≥n.
                
                Usuario: {user_message}
                
                Respuesta:"""
                
                # Generar respuesta usando el modelo de lenguaje
                response = self.generate_response(
                    prompt=prompt, 
                    system_prompt=system_prompt,
                    use_streaming=use_streaming
                )
                
                # Limpiar la respuesta
                response_text = response.strip()
                
                # Reemplazar saltos de l√≠nea para asegurar formato consistente
                return response_text.replace('\n', '\r\n')
                
            except Exception as e:
                print(f"Error al generar respuesta: {str(e)}")
                return "Lo siento, estoy teniendo problemas para procesar tu solicitud. Por favor, int√©ntalo de nuevo m√°s tarde."
            
            logger.info(f"Respuesta generada: {response[:200]}..." if response else "Respuesta vac√≠a")
            return response if response else "No pude generar una respuesta en este momento. ¬øPodr√≠as reformular tu pregunta?"
            
        except Exception as e:
            error_msg = f"Error en get_response: {str(e)}"
            logger.error(f"{error_msg}\n{traceback.format_exc()}")
            return "Lo siento, hubo un error al procesar tu mensaje. Por favor, int√©ntalo de nuevo m√°s tarde."


def initialize_llm_handler() -> LLMHandler:
    """
    Inicializa y devuelve una instancia de LLMHandler.
    
    Returns:
        LLMHandler: Instancia configurada del manejador LLM
    """
    try:
        # Construir la ruta al modelo
        model_path = os.path.join(DEFAULT_MODEL_DIR, DEFAULT_MODEL_FILENAME)
        
        # Verificar si el directorio existe
        if not os.path.exists(DEFAULT_MODEL_DIR):
            os.makedirs(DEFAULT_MODEL_DIR, exist_ok=True)
            logger.warning(f"Se cre√≥ el directorio para el modelo en: {DEFAULT_MODEL_DIR}")
        
        # Verificar si el archivo existe
        if not os.path.exists(model_path):
            logger.warning(f"No se encontr√≥ el archivo del modelo en: {model_path}")
            # Intentar encontrar cualquier archivo .gguf en el directorio
            try:
                if os.path.exists(DEFAULT_MODEL_DIR):
                    files = [f for f in os.listdir(DEFAULT_MODEL_DIR) if f.endswith('.gguf')]
                    if files:
                        model_path = os.path.join(DEFAULT_MODEL_DIR, files[0])
                        logger.info(f"Usando modelo alternativo: {model_path}")
                    else:
                        logger.warning("No se encontraron archivos .gguf en el directorio del modelo")
                else:
                    logger.error(f"El directorio del modelo no existe: {DEFAULT_MODEL_DIR}")
            except Exception as e:
                logger.error(f"Error al buscar archivos de modelo: {str(e)}")
        
        # Crear la instancia
        handler = LLMHandler(model_path=model_path)
        
        # Intentar cargar el modelo
        try:
            if not handler.load_model():
                logger.error("No se pudo cargar el modelo LLM")
                # Configurar un manejador de respuestas b√°sico
                handler.get_response = lambda msg, **kwargs: "El sistema de respuestas avanzado no est√° disponible en este momento. Por favor, intente m√°s tarde."
        except Exception as e:
            logger.error(f"Error al cargar el modelo: {str(e)}")
            # Configurar un manejador de respuestas b√°sico
            handler.get_response = lambda msg, **kwargs: "El sistema de respuestas avanzado no est√° disponible en este momento. Por favor, intente m√°s tarde."
        
        return handler
        
    except Exception as e:
        logger.error(f"Error al inicializar LLMHandler: {str(e)}\n{traceback.format_exc()}")
        # Devolver un manejador b√°sico que no requiere modelo
        dummy_handler = LLMHandler(model_path="")
        dummy_handler.get_response = lambda msg, **kwargs: "El sistema de respuestas avanzado no est√° disponible en este momento. Por favor, intente m√°s tarde."
        return dummy_handler

# Inicializar una instancia global
llm_handler = initialize_llm_handler()

def _obtener_respuesta_por_tag(tag: str) -> str:
    """Obtiene una respuesta aleatoria de un tag espec√≠fico en intents.json"""
    try:
        intents = cargar_intents()
        for intent in intents.get('intents', []):
            if intent.get('tag') == tag and 'responses' in intent and intent['responses']:
                return random.choice(intent['responses'])
        return f"No tengo informaci√≥n sobre {tag} en este momento."
    except Exception as e:
        logger.error(f"Error al obtener respuesta para tag {tag}: {str(e)}")
        return "No pude obtener la informaci√≥n solicitada en este momento."

def _formatear_respuesta(titulo: str, lineas: List[str]) -> str:
    """
    Formatea una respuesta con un t√≠tulo y una lista de l√≠neas.
    
    Args:
        titulo (str): T√≠tulo de la secci√≥n
        lineas (List[str]): Lista de l√≠neas de contenido
        
    Returns:
        str: Texto formateado con t√≠tulo y lista
    """
    # Construir la respuesta con formato mejorado
    respuesta = [f"\n{titulo}", ""]
    
    # Agregar cada l√≠nea con vi√±etas y sangr√≠a
    for linea in lineas:
        respuesta.append(f"‚Ä¢ {linea.strip()}")
    
    # Agregar espacio al final para mejor legibilidad
    respuesta.append("")
    
    return "\n".join(respuesta)

def _obtener_plan_economico() -> str:
    """
    Devuelve informaci√≥n sobre el plan de internet m√°s econ√≥mico.
    
    Returns:
        str: Respuesta formateada con el plan m√°s econ√≥mico.
    """
    # Obtener todos los planes residenciales
    planes_residenciales = _obtener_planes_por_categoria('residencial')
    
    if not planes_residenciales:
        return "No se encontraron planes disponibles en este momento."
    
    # Encontrar el plan m√°s econ√≥mico
    plan_economico = min(planes_residenciales, key=lambda x: x['precio'])
    
    # Construir recomendaciones
    recomendaciones = [
        f"‚Ä¢ Dispositivos conectados: {plan_economico.get('dispositivos', 'Hasta ' + str(plan_economico.get('dispositivos', '')) + ' dispositivos')}",
        f"‚Ä¢ {plan_economico.get('trabajo_estudio', '')}",
        f"‚Ä¢ {plan_economico.get('video', '')}",
        "‚Ä¢ Internet ilimitado"
    ]
    
    respuesta = [
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLAN ECON√ìMICO RECOMENDADO ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n",
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n",
        f"üíé *{plan_economico['nombre']}*\r\n",
        f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n",
        f"   ‚Ä¢ üöÄ *Velocidad*: `{plan_economico['velocidad']}`\r\n",
        f"   ‚Ä¢ üíµ *Precio*: `${plan_economico['precio']}`\r\n",
        f"   ‚Ä¢ üì¶ *Incluye*:\r\n",
        "     - üì∂ WiFi incluido\r\n",
        "     - üõ†Ô∏è Soporte t√©cnico 24/7\r\n",
        "     - ‚àû Sin l√≠mite de datos\r\n\r\n",
        "\r\nüîπ *¬øTe gustar√≠a contratar este plan o necesitas m√°s informaci√≥n?*\r\n",
        "   ‚Ä¢ üìû Llama al `800-123-4567`\r\n",
    ]
    
    return "".join(respuesta)

def _obtener_planes_por_categoria(categoria: str) -> list:
    """
    Devuelve los planes seg√∫n la categor√≠a especificada.
    
    Args:
        categoria (str): Categor√≠a de los planes ('residencial', 'empresarial', etc.)
        
    Returns:
        list: Lista de diccionarios con la informaci√≥n de los planes
    """
    # Datos de los planes residenciales
    if categoria == 'residencial':
        return [
            {
                'nombre': '50 megas',
                'velocidad': '50 Mbps',
                'precio': 300,
                'dispositivos': '8-10 dispositivos conectados',
                'trabajo_estudio': '3 personas trabajando/estudiando',
                'video': 'Streaming HD y gaming',
                'internet': 'Internet ilimitado'
            },
            {
                'nombre': '75 megas',
                'velocidad': '75 Mbps',
                'precio': 400,
                'dispositivos': '8-12 dispositivos conectados',
                'trabajo_estudio': '3 personas trabajando/estudiando',
                'video': 'Alta calidad',
                'internet': 'Internet ilimitado'
            },
            {
                'nombre': '100 megas',
                'velocidad': '100 Mbps',
                'precio': 500,
                'dispositivos': '11-15 dispositivos conectados',
                'trabajo_estudio': '5 personas trabajando/estudiando',
                'video': 'Alta calidad',
                'internet': 'Internet ilimitado'
            },
            {
                'nombre': '200 megas',
                'velocidad': '200 Mbps',
                'precio': 600,
                'dispositivos': '16-20 dispositivos conectados',
                'trabajo_estudio': '8 personas trabajando/estudiando',
                'video': '4K',
                'internet': 'Internet ilimitado'
            },
            {
                'nombre': '500 megas',
                'velocidad': '500 Mbps',
                'precio': 800,
                'dispositivos': '21-25 dispositivos conectados',
                'trabajo_estudio': '16 personas trabajando/estudiando',
                'video': '4K',
                'internet': 'Internet ilimitado'
            },
            {
                'nombre': '1000 megas',
                'velocidad': '1000 Mbps',
                'precio': 1400,
                'dispositivos': 'M√°s de 25 dispositivos conectados',
                'trabajo_estudio': 'M√°s de 16 personas trabajando/estudiando',
                'video': '4K',
                'internet': 'Internet ilimitado'
            }
        ]
    # Datos de los planes empresariales
    elif categoria == 'empresarial':
        return [
            {
                'nombre': '100 MB',
                'velocidad': '100 Mbps',
                'precio': 1500,
                'descripcion': 'Empresas peque√±as/medianas',
                'detalles': [
                    'Videollamadas HD simult√°neas: 5',
                    'Internet sim√©trico',
                    'Soporte t√©cnico prioritario',
                    'IP fija incluida'
                ]
            },
            {
                'nombre': '200 MB',
                'velocidad': '200 Mbps',
                'precio': 2000,
                'descripcion': 'Empresas peque√±as/medianas',
                'detalles': [
                    'Videollamadas HD simult√°neas: 10',
                    'Internet sim√©trico',
                    'Soporte t√©cnico prioritario',
                    'IP fija incluida',
                    'Servicio de respaldo'
                ]
            },
            {
                'nombre': '500 MB',
                'velocidad': '500 Mbps',
                'precio': 3000,
                'descripcion': 'Empresas medianas',
                'detalles': [
                    'Videollamadas HD simult√°neas: 20',
                    'Internet sim√©trico',
                    'Soporte t√©cnico prioritario',
                    'IP fija incluida',
                    'Servicio de respaldo',
                    'Ancho de banda garantizado'
                ]
            },
            {
                'nombre': '1 GB',
                'velocidad': '1000 Mbps',
                'precio': 5000,
                'descripcion': 'Empresas grandes',
                'detalles': [
                    'Videollamadas HD simult√°neas: ilimitadas',
                    'Internet sim√©trico',
                    'Soporte t√©cnico prioritario 24/7',
                    'IP fija incluida',
                    'Servicio de respaldo',
                    'Ancho de banda garantizado',
                    'SLA 99.9%'
                ]
            }
        ]
    return []

def _obtener_plan_maxima_velocidad() -> str:
    """
    Devuelve informaci√≥n sobre el plan de internet con mayor velocidad.
    
    Returns:
        str: Respuesta formateada con el plan de m√°xima velocidad.
    """
    # Obtener todos los planes residenciales
    planes_residenciales = _obtener_planes_por_categoria('residencial')
    
    if not planes_residenciales:
        return "No se encontraron planes disponibles en este momento."
    
    # Convertir velocidad a entero para comparaci√≥n
    for plan in planes_residenciales:
        plan['velocidad_num'] = int(plan['velocidad'].split()[0])
    
    # Encontrar el plan con mayor velocidad
    plan_max_velocidad = max(planes_residenciales, key=lambda x: x['velocidad_num'])
    
    # Construir recomendaciones
    recomendaciones = [
        f"‚Ä¢ Dispositivos conectados: {plan_max_velocidad.get('dispositivos', '')}",
        f"‚Ä¢ {plan_max_velocidad.get('trabajo_estudio', '')}",
        f"‚Ä¢ {plan_max_velocidad.get('video', '')}",
        "‚Ä¢ Internet ilimitado"
    ]
    
    respuesta = [
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLAN M√ÅXIMA VELOCIDAD ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n",
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n",
        f"‚ö° *{plan_max_velocidad['nombre']}*\r\n",
        f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n",
        f"   ‚Ä¢ üöÄ *Velocidad*: `{plan_max_velocidad['velocidad']}`\r\n",
        f"   ‚Ä¢ üíé *Precio*: `${plan_max_velocidad['precio']}`\r\n",
        f"   ‚Ä¢ üéÅ *Beneficios exclusivos*:\r\n",
        "     - üì∂ WiFi 6 de √∫ltima generaci√≥n\r\n",
        "     - ‚≠ê Soporte t√©cnico prioritario 24/7\r\n",
        "     - ‚àû Sin l√≠mite de datos\r\n",
        "     - üñ•Ô∏è 3 meses de servicio de streaming incluido\r\n",
        "     - üéÆ Ideal para teletrabajo, streaming y gaming\r\n\r\n",
        "\r\nüîπ *¬øTe gustar√≠a contratar este plan o necesitas m√°s informaci√≥n?*\r\n",
        "   ‚Ä¢ üìû Llama al `800-123-4567`\r\n",
        "   ‚Ä¢ üåê Visita: [www.emenet.com.mx/contratar](https://www.emenet.com.mx/contratar)"
    ]
    
    return "".join(respuesta)

def _generar_respuesta_planes_internet() -> str:
    """
    Genera una respuesta formateada con todos los planes de internet residenciales disponibles.
    
    Returns:
        str: Respuesta formateada con los planes de internet.
    """
    # Obtener todos los planes residenciales
    planes_residenciales = _obtener_planes_por_categoria('residencial')
    
    if not planes_residenciales:
        return "No se encontraron planes disponibles en este momento."
    
    # Ordenar planes por velocidad (de menor a mayor)
    for plan in planes_residenciales:
        plan['velocidad_num'] = int(plan['velocidad'].split()[0])
    planes_ordenados = sorted(planes_residenciales, key=lambda x: x['velocidad_num'])
    
    # Construir la respuesta formateada
    respuesta = [
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLANES DE INTERNET RESIDENCIAL ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n",
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n",
        "¬°Hola! Aqu√≠ tienes los planes de internet residencial que ofrecemos:\r\n\r\n"
    ]
    
    # Agregar cada plan con su informaci√≥n
    for plan in planes_ordenados:
        recomendaciones = [
            f"‚Ä¢ Dispositivos: {plan.get('dispositivos', '')}",
            f"‚Ä¢ {plan.get('trabajo_estudio', '')}",
            f"‚Ä¢ {plan.get('video', '')}",
            "‚Ä¢ Internet ilimitado"
        ]
        
        respuesta.extend([
            f"üîπ *{plan['nombre']}*\r\n",
            f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n",
            f"   ‚Ä¢ üöÄ *Velocidad*: `{plan['velocidad']}`\r\n",
            f"   ‚Ä¢ üíµ *Precio*: `${plan['precio']}`\r\n",
            f"   ‚Ä¢ üì¶ *Incluye*:\r\n",
            "\r\n".join(recomendaciones) + "\r\n"
        ])
    
    # Agregar caracter√≠sticas generales
    respuesta.extend([
        "\r\n*Beneficios incluidos en todos los planes:*\r\n",
        "‚Ä¢ Conexi√≥n sim√©trica (misma velocidad de subida y bajada)\r\n",
        "‚Ä¢ Internet ilimitado\r\n",
        "‚Ä¢ Router WiFi incluido\r\n",
        "‚Ä¢ Soporte t√©cnico 24/7\r\n",
        "‚Ä¢ Instalaci√≥n profesional sin costo\r\n\r\n",
        "¬øTe gustar√≠a contratar alguno de estos planes o necesitas m√°s informaci√≥n? üòä"
    ])
    
    return "".join(respuesta)

def _obtener_horarios_atencion() -> str:
    """
    Devuelve informaci√≥n sobre los horarios de atenci√≥n y contacto de emergencia.
    
    Returns:
        str: Respuesta formateada con los horarios de atenci√≥n.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ HORARIOS DE ATENCI√ìN ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üïí *HORARIO DE ATENCI√ìN*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ üìÖ *Lunes a Viernes*: 09:00 a.m. - 06:00 p.m.\r\n"
        "   ‚Ä¢ üìÖ *S√°bados*: 09:00 a.m. - 03:00 p.m.\r\n"
        "   ‚Ä¢ ‚ùå *Domingos*: Cerrado\r\n\r\n"
        "\r\nüí≥ *PAGOS 24/7*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   Realiza tus pagos en cualquier momento a trav√©s de:\r\n"
        "   ‚Ä¢ üåê *P√°gina web*: [www.emenet.com.mx/pagos](https://www.emenet.com.mx/pagos)\r\n"
        "   ‚Ä¢ üì± *Aplicaci√≥n m√≥vil* (disponible en App Store y Google Play)\r\n\r\n"
        "\r\nüö® *EMERGENCIAS T√âCNICAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   Para reportar fallas t√©cnicas graves fuera de horario:\r\n"
        "   ‚Ä¢ üìû *Tel√©fono de Emergencias*: 55-9999-8888\r\n"
        "   ‚Ä¢ üí¨ *WhatsApp*: `55-1234-5678`\r\n\r\n"
        "\r\nüîπ *¬øEn qu√© m√°s puedo ayudarte hoy?* üîπ"
    )

def _obtener_categorias_servicios() -> str:
    """
    Devuelve informaci√≥n sobre las diferentes categor√≠as de servicios disponibles.
    
    Returns:
        str: Respuesta formateada con las categor√≠as de servicios.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ CATEGOR√çAS DE SERVICIOS ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "¬°Claro! Estos son los tipos de servicios que ofrecemos:\r\n\r\n"
        "üîπ *1. INTERNET RESIDENCIAL*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Planes desde 50 Mbps hasta 1 Gbps\r\n"
        "   ‚Ä¢ Conexi√≥n sim√©trica (misma velocidad de subida y bajada)\r\n"
        "   ‚Ä¢ Ideal para hogares con m√∫ltiples dispositivos\r\n\r\n"
        "üîπ *2. INTERNET EMPRESARIAL*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Soluciones a medida para empresas\r\n"
        "   ‚Ä¢ Conectividad dedicada\r\n"
        "   ‚Ä¢ Soporte prioritario 24/7\r\n\r\n"
        "üîπ *3. TELEFON√çA IP*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ L√≠neas telef√≥nicas virtuales\r\n"
        "   ‚Ä¢ Llamadas ilimitadas\r\n"
        "   ‚Ä¢ Incluye servicios de voz sobre IP\r\n\r\n"
        "üîπ *4. VIDEOVIGILANCIA*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ C√°maras de seguridad HD\r\n"
        "   ‚Ä¢ Monitoreo remoto 24/7\r\n"
        "   ‚Ä¢ Almacenamiento en la nube\r\n\r\n"
        "¬øTe gustar√≠a m√°s informaci√≥n sobre alguna de estas categor√≠as en particular?"
        " Por ejemplo, puedes preguntar por 'planes de internet residencial' o 'servicios de videovigilancia'."
    )

def _obtener_planes_internet_residencial() -> str:
    """
    Devuelve informaci√≥n detallada sobre los planes de internet residencial.
    
    Returns:
        str: Respuesta formateada con los planes de internet residencial.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLANES DE INTERNET RESIDENCIAL ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üåê *Conecta tu hogar con la mejor velocidad y estabilidad*\r\n\r\n"
        "üîπ *50 MEGAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $300/mes\r\n"
        "   ‚Ä¢ Ideal para: 8-10 dispositivos conectados\r\n"
        "   ‚Ä¢ Hasta 3 personas trabajando/estudiando\r\n"
        "   ‚Ä¢ Streaming HD y gaming sin interrupciones\r\n"
        "   ‚Ä¢ Internet ilimitado\r\n\r\n"
        "üîπ *75 MEGAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $400/mes\r\n"
        "   ‚Ä¢ Ideal para: 8-12 dispositivos conectados\r\n"
        "   ‚Ä¢ Hasta 3 personas trabajando/estudiando\r\n"
        "   ‚Ä¢ Reproducci√≥n de video en alta calidad\r\n"
        "   ‚Ä¢ Juegos en l√≠nea sin lag\r\n\r\n"
        "üîπ *100 MEGAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $500/mes\r\n"
        "   ‚Ä¢ Ideal para: 11-15 dispositivos conectados\r\n"
        "   ‚Ä¢ Hasta 5 personas trabajando/estudiando\r\n"
        "   ‚Ä¢ Streaming 4K sin interrupciones\r\n"
        "   ‚Ä¢ Transmisiones en vivo fluidas\r\n\r\n"
        "üîπ *200 MEGAS* (RECOMENDADO)\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $600/mes\r\n"
        "   ‚Ä¢ Ideal para: 16-20 dispositivos conectados\r\n"
        "   ‚Ä¢ Hasta 8 personas trabajando/estudiando\r\n"
        "   ‚Ä¢ Streaming 4K en m√∫ltiples dispositivos\r\n"
        "   ‚Ä¢ Juegos en l√≠nea sin interrupciones\r\n\r\n"
        "üîπ *500 MEGAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $800/mes\r\n"
        "   ‚Ä¢ Ideal para: 21-25 dispositivos conectados\r\n"
        "   ‚Ä¢ Hasta 16 personas trabajando/estudiando\r\n"
        "   ‚Ä¢ Conexi√≥n ultrarr√°pida para m√∫ltiples usos\r\n\r\n"
        "üîπ *1000 MEGAS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $1,400/mes\r\n"
        "   ‚Ä¢ Ideal para: M√°s de 25 dispositivos\r\n"
        "   ‚Ä¢ Para hogares con muchas necesidades de conectividad\r\n"
        "   ‚Ä¢ La m√°xima velocidad para tu hogar inteligente\r\n\r\n"
        "üìû *¬øNecesitas ayuda para elegir el mejor plan para tu hogar?*"
        " Estamos aqu√≠ para asesorarte."
    )

def _obtener_planes_internet_empresarial() -> str:
    """
    Devuelve informaci√≥n sobre los planes de internet empresarial.
    
    Returns:
        str: Respuesta formateada con los planes de internet empresarial.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLANES DE INTERNET EMPRESARIAL ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üè¢ *Conectividad empresarial de alto rendimiento*\r\n"
        "Soluciones dise√±adas para el crecimiento de tu negocio.\r\n\r\n"
        "üîπ *100 MB DEDICADOS*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $1,500/mes\r\n"
        "   ‚Ä¢ Ideal para: Peque√±as/medianas empresas\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - IP p√∫blica fija\r\n"
        "     - Soporte t√©cnico prioritario\r\n"
        "     - Hasta 5 videollamadas HD simult√°neas\r\n"
        "     - Internet sim√©trico (misma velocidad de subida y bajada)\r\n\r\n"
        "üîπ *200 MB DEDICADOS* (PR√ìXIMAMENTE)\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $2,500/mes\r\n"
        "   ‚Ä¢ Ideal para: Medianas empresas\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - M√∫ltiples IPs p√∫blicas\r\n"
        "     - Soporte VIP 24/7\r\n"
        "     - Hasta 10 videollamadas HD simult√°neas\r\n"
        "     - Conectividad redundante\r\n\r\n"
        "üîπ *1 GB DEDICADO* (PR√ìXIMAMENTE)\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $4,500/mes\r\n"
        "   ‚Ä¢ Ideal para: Grandes empresas y corporativos\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - M√∫ltiples IPs p√∫blicas\r\n"
        "     - Soporte dedicado 24/7 con respuesta inmediata\r\n"
        "     - Videoconferencias ilimitadas\r\n"
        "     - Enlaces redundantes\r\n\r\n"
        "üíº *Beneficios para todas las empresas*\r\n"
        "   ‚Ä¢ Instalaci√≥n sin costo\r\n"
        "   ‚Ä¢ Sin l√≠mite de datos\r\n"
        "   ‚Ä¢ Facturaci√≥n electr√≥nica\r\n"
        "   ‚Ä¢ Asesor√≠a t√©cnica especializada\r\n"
        "   ‚Ä¢ Soluciones personalizadas seg√∫n necesidades\r\n\r\n"
        "üìû *Cont√°ctanos* para una asesor√≠a personalizada y cotizaci√≥n a la medida de tu negocio."
    )

def _obtener_planes_telefonia() -> str:
    """
    Devuelve informaci√≥n sobre los planes de telefon√≠a IP.
    
    Returns:
        str: Respuesta formateada con los planes de telefon√≠a IP.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ PLANES DE TELEFON√çA EN LA NUBE ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üìû *Comunica a tu negocio con tecnolog√≠a de vanguardia*\r\n\r\n"
        "üîπ *PLAN B√ÅSICO*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $300/mes por extensi√≥n\r\n"
        "   ‚Ä¢ Ideal para: Peque√±as empresas y emprendedores\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - Llamadas ilimitadas a M√©xico y USA\r\n"
        "     - Buz√≥n de voz incluido\r\n"
        "     - 1 n√∫mero virtual gratuito\r\n"
        "     - Transferencia de llamadas\r\n"
        "     - Mensajer√≠a de voz a correo\r\n\r\n"
        "üîπ *PLAN PREMIUM* (RECOMENDADO)\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Precio: $500/mes\r\n"
        "   ‚Ä¢ Ideal para: Empresas en crecimiento\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - Hasta 50 extensiones\r\n"
        "     - Grabaci√≥n de llamadas\r\n"
        "     - Integraci√≥n con CRM\r\n"
        "     - Soporte VIP 24/7\r\n"
        "     - IVR/Men√∫ autom√°tico\r\n"
        "     - Reportes detallados\r\n\r\n"
        "üì± *Beneficios de nuestra telefon√≠a en la nube*\r\n"
        "   ‚Ä¢ Sin inversi√≥n en equipos costosos\r\n"
        "   ‚Ä¢ Escalable seg√∫n tus necesidades\r\n"
        "   ‚Ä¢ Acceso desde cualquier dispositivo\r\n"
        "   ‚Ä¢ Configuraci√≥n remota y sencilla\r\n"
        "   ‚Ä¢ Actualizaciones autom√°ticas\r\n\r\n"
        "üìû *Cont√°ctanos* para una demostraci√≥n personalizada de nuestra soluci√≥n de telefon√≠a en la nube."
    )

def _obtener_planes_videovigilancia() -> str:
    """
    Devuelve informaci√≥n sobre los servicios de videovigilancia.
    
    Returns:
        str: Respuesta formateada con los planes de videovigilancia.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ SERVICIOS DE VIDEOVIGILANCIA ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üëÅÔ∏è *Tranquilidad y seguridad para tu negocio o hogar*\r\n\r\n"
        "üîπ *PAQUETE B√ÅSICO*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Inversi√≥n inicial: $4,500\r\n"
        "   ‚Ä¢ Ideal para: Peque√±os negocios y hogares\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - 4 c√°maras HD 1080p\r\n"
        "     - Grabaci√≥n continua 24/7\r\n"
        "     - App m√≥vil para monitoreo\r\n"
        "     - Almacenamiento por 7 d√≠as\r\n"
        "     - Soporte t√©cnico incluido\r\n\r\n"
        "üîπ *PAQUETE PREMIUM* (RECOMENDADO)\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ Inversi√≥n inicial: $8,000\r\n"
        "   ‚Ä¢ Ideal para: Empresas medianas y residencias de lujo\r\n"
        "   ‚Ä¢ Incluye:\r\n"
        "     - 8 c√°maras HD 4K\r\n"
        "     - Visi√≥n nocturna avanzada\r\n"
        "     - Detecci√≥n de movimiento inteligente\r\n"
        "     - Almacenamiento por 30 d√≠as\r\n"
        "     - Soporte prioritario 24/7\r\n"
        "     - An√°lisis de video con IA\r\n\r\n"
        "üîí *Beneficios de nuestros sistemas de videovigilancia*\r\n"
        "   ‚Ä¢ Instalaci√≥n profesional sin cargo adicional\r\n"
        "   - Mantenimiento preventivo incluido\r\n"
        "   - Actualizaciones de firmware gratuitas\r\n"
        "   - Monitoreo remoto desde cualquier dispositivo\r\n"
        "   - Soluciones personalizadas seg√∫n tus necesidades\r\n\r\n"
        "üìû *¬°Protege lo que m√°s te importa!* Cont√°ctanos para una asesor√≠a personalizada sin costo."
    )

def _obtener_direccion_por_ip() -> str:
    """
    Intenta obtener la ubicaci√≥n aproximada del usuario basada en su IP p√∫blica.
    """
    try:
        response = requests.get('https://api.ipify.org?format=json', timeout=5)
        ip_publica = response.json().get('ip', '')
        if not ip_publica:
            raise Exception("No se pudo obtener la IP p√∫blica")
            
        geo_response = requests.get(f'https://ipapi.co/{ip_publica}/json/', timeout=5)
        geo_data = geo_response.json()
        
        ciudad = geo_data.get('city', '').strip() or 'desconocida'
        estado = geo_data.get('region', '').strip() or 'desconocido'
        pais = geo_data.get('country_name', '').strip() or 'desconocido'
        
        mensaje = (
            f"üåç *Hemos detectado que est√°s en:*\r\n"
            f"üìç {ciudad}, {estado}, {pais}\r\n\r\n"
            "¬øEs correcta esta ubicaci√≥n? Por favor conf√≠rmame para verificar la cobertura en tu zona.\r\n"
            "O si prefieres, puedes proporcionarme tu direcci√≥n completa manualmente."
        )
        
        return {
            'mensaje': mensaje,
            'ciudad': ciudad,
            'estado': estado,
            'pais': pais,
            'exito': True
        }
        
    except Exception as e:
        logging.error(f"Error al obtener ubicaci√≥n por IP: {str(e)}")
        return {
            'mensaje': (
                "üîç No pudimos detectar autom√°ticamente tu ubicaci√≥n. "
                "Por favor, comp√°rtenos tu direcci√≥n completa para verificar la cobertura en tu zona."
            ),
            'ciudad': '',
            'estado': '',
            'pais': '',
            'exito': False
        }

def _obtener_metodos_pago() -> str:
    """
    Devuelve informaci√≥n detallada sobre los m√©todos de pago disponibles.
    
    Returns:
        str: Respuesta formateada con la informaci√≥n de m√©todos de pago.
    """
    return (
        "üü£ *‚Ä¢‚Ä¢‚Ä¢ M√âTODOS DE PAGO DISPONIBLES ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
        "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
        "üîµ *1. PAGO EN VENTANILLA HSBC*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   üí≥ *N√∫mero de cuenta:* `4062 4091 31`\r\n"
        "   üë§ *Beneficiario:* IPTVTEL COMUNICACIONES S DE RL DE CV\r\n\r\n"
        "\r\nüîµ *2. TRANSFERENCIA ELECTR√ìNICA*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   üè¶ *CLABE interbancaria:* `0214 5304 0624 0913 11`\r\n"
        "   üèõÔ∏è *Banco:* HSBC\r\n"
        "   üë§ *Beneficiario:* IPTVTEL COMUNICACIONES S DE RL DE CV\r\n\r\n"
        "\r\nüîµ *3. DEP√ìSITO EN OXXO Y FARMACIAS DEL AHORRO*\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   üí≥ *Tarjeta de d√©bito:* `4741 7640 0198 2278`\r\n\r\n"
        "\r\nüî∑ *INFORMACI√ìN IMPORTANTE* üî∑\r\n"
        "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
        "   ‚Ä¢ üìå Aseg√∫rate de incluir tu *n√∫mero de cliente* o *referencia* en el concepto de pago.\r\n"
        "   ‚Ä¢ ‚è±Ô∏è Los pagos pueden tardar hasta *24 horas h√°biles* en reflejarse.\r\n"
        "   ‚Ä¢ üìã Guarda tu comprobante de pago por cualquier aclaraci√≥n.\r\n\r\n"
        "üí° *¬øNecesitas ayuda con alg√∫n otro m√©todo de pago o tienes alguna duda?* üòä"
    )

def _obtener_informacion_sucursales(sucursal_buscada: str = None) -> str:
    """
    Devuelve informaci√≥n sobre las sucursales disponibles.
    
    Args:
        sucursal_buscada (str, optional): Nombre de la sucursal espec√≠fica a buscar. 
                                         Si es None, devuelve todas las sucursales.
    
    Returns:
        str: Respuesta formateada con la informaci√≥n de las sucursales.
    """
    # Base de datos de sucursales
    sucursales = [
        {
            'nombre': 'Santiago Tianguistenco',
            'direccion': 'ANDADOR CARLOS HANK GONZALEZ #304, SANTIAGO TIANGUISTENCO, ESTADO DE MEXICO',
            'referencia': 'JUNTO AL BANCO SANTANDER',
            'horario': 'L-V 9:00 AM - 6:00 PM\r\nS√°bados: 9:00 AM - 3:00 PM',
            'telefono': '55-8765-4321',
            'whatsapp': 'https://wa.me/525587654321',
            'mapa': 'https://www.google.com/maps/place/M-net+Sistemas+Computadoras+e+Internet/@19.1816993,-99.4694112,764m/data=!3m2!1e3!4b1!4m6!3m5!1s0x85cdf3d2a5c1d91f:0x59b36638210c9c11!8m2!3d19.1816993!4d-99.4668363!16s%2Fg%2F11c6112plc?entry=ttu&g_ep=EgoyMDI1MDUyMS4wIKXMDSoJLDEwMjExNDU1SAFQAw%3D%3D',
            'palabras_clave': ['santiago', 'tianguistenco', 'santander']
        },
        {
            'nombre': 'Santa M√≥nica',
            'direccion': 'GALEANA #27 CARR. MEXICO-CHALMA COL. EL PICACHO, OCUILAN DE ARTEAGA, ESTADO DE MEXICO',
            'referencia': 'JUNTO A FEDEX',
            'horario': 'L-V 9:00 AM - 6:00 PM\r\nS√°bados: 9:00 AM - 3:00 PM',
            'telefono': '55-1234-5678',
            'whatsapp': 'https://wa.me/525587654321',
            'mapa': 'https://maps.app.goo.gl/bw4Q7EGeADY1Z6xd7',
            'palabras_clave': ['santa', 'monica', 'fedex', 'chalma']
        },
        {
            'nombre': 'Cholula',
            'direccion': 'JOSE MA. MORELOS S/N, ESQUINA CON BENITO JUAREZ GARCIA COL. MORELOS, SAN PEDRO CHOLULA, ESTADO DE MEXICO',
            'referencia': 'DEBAJO DEL HOTEL CHOLULA',
            'horario': 'L-V 9:00 AM - 6:00 PM\r\nS√°bados: 9:00 AM - 3:00 PM',
            'telefono': '55-8765-4321',
            'whatsapp': 'https://wa.me/525587654321',
            'mapa': 'https://maps.app.goo.gl/9A7pdCtpqeEQzSnf6',
            'palabras_clave': ['cholula', 'morelos', 'hotel']
        }
    ]
    
    # Filtrar sucursales si se especifica una b√∫squeda
    if sucursal_buscada:
        sucursal_buscada = sucursal_buscada.lower()
        sucursales_filtradas = [
            s for s in sucursales 
            if (sucursal_buscada in s['nombre'].lower() or 
                any(palabra in sucursal_buscada for palabra in s['palabras_clave']))
        ]
        
        if not sucursales_filtradas:
            return (
                f"üîç No encontr√© una sucursal que coincida con '{sucursal_buscada}'. "
                "Aqu√≠ tienes informaci√≥n de todas nuestras sucursales:\r\n\r\n"
            )
    else:
        sucursales_filtradas = sucursales
    
    # Construir la respuesta
    respuesta = ["üè¢ *Nuestras Sucursales* üè¢\r\n\r\n"]
    
    for i, sucursal in enumerate(sucursales_filtradas, 1):
        respuesta.extend([
            f"üìç *{sucursal['nombre']}*\r\n",
            f"üìå *Direcci√≥n:* {sucursal['direccion']}\r\n",
            f"   {sucursal['referencia']}\r\n",
            f"üïí *Horario:* {sucursal['horario']}\r\n",
            f"üìû *Tel√©fono:* {sucursal['telefono']}\r\n",
            f"üåê *Ver en mapa:* {sucursal['mapa']}\r\n"
        ])
        
        # Agregar separador si no es la √∫ltima sucursal
        if i < len(sucursales_filtradas):
            respuesta.append("\r\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\r\n\r\n")
    
    # Agregar informaci√≥n de contacto general
    respuesta.extend([
        "\r\nüì± *Contacto General:*\r\n",
        "‚Ä¢ WhatsApp: https://wa.me/525587654321\r\n",
        "‚Ä¢ Tel√©fono: 55-1234-5678\r\n",
        "‚Ä¢ Email: contacto@ejemplo.com\r\n\r\n",
        "üí° *Servicios disponibles en todas las sucursales:*\r\n",
        "‚Ä¢ Oficinas profesionales\r\n",
        "‚Ä¢ Estacionamiento disponible\r\n",
        "‚Ä¢ Pago con tarjeta de d√©bito o cr√©dito\r\n",
        "‚Ä¢ Accesible para todo p√∫blico\r\n\r\n",
        "¬øNecesitas m√°s informaci√≥n sobre alguna sucursal en particular? üòä"
    ])
    
    return "".join(respuesta)

def _obtener_solucion_falla(problema: str) -> str:
    """
    Devuelve soluciones para problemas comunes de internet.
    
    Args:
        problema (str): Descripci√≥n del problema reportado por el usuario.
        
    Returns:
        str: Respuesta con pasos para solucionar el problema.
    """
    problema = problema.lower()
    
    if any(palabra in problema for palabra in ['lento', 'lenta', 'despacio', 'velocidad']):
        # Primero ofrecer soluciones para mejorar la velocidad
        return (
            "üü£ *‚Ä¢‚Ä¢‚Ä¢ SOLUCI√ìN: INTERNET LENTO ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
            "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
            "üêå *S√≠ntomas detectados*:\r\n"
            "   ‚Ä¢ Velocidad de internet m√°s lenta de lo normal\r\n"
            "   ‚Ä¢ Carga lenta de p√°ginas web\r\n"
            "   ‚Ä¢ Buffering en videos o juegos\r\n\r\n"
            "üîß *Soluci√≥n recomendada*:\r\n"
            "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
            "   1. *Reinicia tu m√≥dem*\r\n"
            "      üîÑ Desconecta el cable de energ√≠a, espera 30 segundos y vuelve a conectarlo.\r\n\r\n"
            "   2. *Verifica dispositivos conectados*\r\n"
            "      üì± Cierra aplicaciones que consuman mucho ancho de banda (streaming, descargas, actualizaciones).\r\n\r\n"
            "   3. *Prueba con cable de red*\r\n"
            "      üîå Conecta tu computadora directamente al m√≥dem con un cable Ethernet para descartar problemas de WiFi.\r\n\r\n"
            "   4. *Optimiza tu red WiFi*\r\n"
            "      üì° Coloca el router en un lugar central, lejos de dispositivos electr√≥nicos y paredes gruesas.\r\n\r\n"
            "   5. *Verifica la hora del d√≠a*\r\n"
            "      ‚è∞ La velocidad puede variar en horas pico (7-11 PM). Intenta tu actividad en otro horario.\r\n\r\n"
            "üìå *Si el problema persiste despu√©s de estos pasos*, es posible que necesites un plan con mayor velocidad. "
            "Para recomendarte la mejor opci√≥n, por favor ind√≠canos:\r\n"
            "   ‚Ä¢ ¬øCu√°ntas personas usan internet en tu hogar?\r\n"
            "   ‚Ä¢ ¬øQu√© actividades realizan (trabajo, estudio, streaming, juegos)?\r\n"
            "   ‚Ä¢ ¬øCu√°l es tu plan actual de velocidad?"
        )
    elif any(palabra in problema for palabra in ['no funciona', 'no tengo', 'no hay', 'se cay√≥', 'se cae', 'inestable']):
        return (
            "üü£ *‚Ä¢‚Ä¢‚Ä¢ SOLUCI√ìN: SIN CONEXI√ìN A INTERNET ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
            "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
            "‚ùå *S√≠ntomas detectados*:\r\n"
            "   ‚Ä¢ No hay acceso a internet\r\n"
            "   ‚Ä¢ Luces del m√≥dem apagadas o en rojo\r\n"
            "   ‚Ä¢ Red WiFi no disponible\r\n\r\n"
            "üîß *Soluci√≥n recomendada*:\r\n"
            "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
            "   1. *Revisa las luces del m√≥dem*\r\n"
            "      üí° Debes ver al menos 3 luces encendidas (Power, DS/Online y US).\r\n\r\n"
            "   2. *Reinicia el m√≥dem*\r\n"
            "      üîÑ Desconecta el cable de energ√≠a por 1 minuto y vuelve a conectarlo.\r\n\r\n"
            "   3. *Verifica cables*\r\n"
            "      üîå Aseg√∫rate de que todos los cables est√©n bien conectados.\r\n\r\n"
            "   4. *Prueba otro dispositivo*\r\n"
            "      üì± Verifica si el problema es con un solo dispositivo o con todos.\r\n\r\n"
            "üìå *Si despu√©s de estos pasos sigues sin conexi√≥n*, por favor proporciona tu n√∫mero de cliente para reportar la falla."
        )
    elif any(palabra in problema for palabra in ['m√≥dem', 'modem', 'router', 'no prende', 'no enciende']):
        return (
            "üü£ *‚Ä¢‚Ä¢‚Ä¢ SOLUCI√ìN: M√ìDEM NO ENCIENDE ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
            "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
            "üîå *S√≠ntomas detectados*:\r\n"
            "   ‚Ä¢ El m√≥dem no muestra luces encendidas\r\n"
            "   ‚Ä¢ No hay respuesta al presionar el bot√≥n de encendido\r\n"
            "   ‚Ä¢ El transformador puede estar caliente\r\n\r\n"
            "üîß *Soluci√≥n recomendada*:\r\n"
            "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
            "   1. *Verifica la conexi√≥n el√©ctrica*\r\n"
            "      üîå Aseg√∫rate de que el cable de poder est√© bien conectado.\r\n\r\n"
            "   2. *Prueba otro enchufe*\r\n"
            "      üîå Conecta el m√≥dem en un enchufe diferente.\r\n\r\n"
            "   3. *Revisa el transformador*\r\n"
            "      üîã El adaptador debe estar fr√≠o al tacto y sin ruidos.\r\n\r\n"
            "   4. *Espera 5 minutos*\r\n"
            "      ‚è±Ô∏è A veces los m√≥dems necesitan tiempo para reiniciarse.\r\n\r\n"
            "üìå *Si el m√≥dem sigue sin encender*, podr√≠a ser necesario un reemplazo. Por favor proporciona tu n√∫mero de cliente para asistirte."
        )
    elif any(palabra in problema for palabra in ['intermitente', 'se va y viene', 'inestable']):
        return (
            "üü£ *‚Ä¢‚Ä¢‚Ä¢ SOLUCI√ìN: CONEXI√ìN INTERMITENTE ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
            "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
            "üîÅ *S√≠ntomas detectados*:\r\n"
            "   ‚Ä¢ La conexi√≥n se cae y vuelve\r\n"
            "   ‚Ä¢ Velocidad inconsistente\r\n"
            "   ‚Ä¢ P√©rdida de se√±al intermitente\r\n\r\n"
            "üîß *Soluci√≥n recomendada*:\r\n"
            "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
            "   1. *Revisa la temperatura del m√≥dem*\r\n"
            "      üå°Ô∏è El sobrecalentamiento puede causar desconexiones.\r\n\r\n"
            "   2. *Verifica interferencias inal√°mbricas*\r\n"
            "      üì° Aleja el m√≥dem de microondas, tel√©fonos inal√°mbricos, etc.\r\n\r\n"
            "   3. *Cambia el canal WiFi*\r\n"
            "      üîÑ Usa una aplicaci√≥n para encontrar el canal menos saturado.\r\n\r\n"
            "   4. *Actualiza el firmware*\r\n"
            "      üíª Verifica si hay actualizaciones disponibles.\r\n\r\n"
            "üìå *Si el problema persiste*, por favor proporciona tu n√∫mero de cliente para revisar tu conexi√≥n."
        )
    else:
        return (
            "üü£ *‚Ä¢‚Ä¢‚Ä¢ ASISTENCIA T√âCNICA ‚Ä¢‚Ä¢‚Ä¢* üü£\r\n\r\n"
            "„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\r\n\r\n"
            "üîç *Necesitamos m√°s informaci√≥n*\r\n"
            "Para brindarte la mejor asistencia, por favor ind√≠canos:\r\n\r\n"
            "1. *Tipo de problema* üìù\r\n"
            "   ¬øQu√© est√° sucediendo exactamente?\r\n\r\n"
            "2. *Tiempo del problema* ‚è∞\r\n"
            "   ¬øDesde cu√°ndo comenz√≥ el problema?\r\n\r\n"
            "3. *Acciones realizadas* üîÑ\r\n"
            "   ¬øYa intentaste reiniciar tu m√≥dem?\r\n\r\n"
            "Con estos detalles podr√© ayudarte de manera m√°s efectiva. üòä\r\n\r\n"
            "üîπ *Ejemplo de informaci√≥n √∫til*:\r\n"
            "   \"No tengo internet desde ayer. Ya reinici√© el m√≥dem dos veces.\""
        )

class ChatMemory:
    """Clase para manejar la memoria y contexto del chatbot."""
    
    def __init__(self, user_id: str = "default", memory_file: str = "chat_memory.pkl"):
        """
        Inicializa la memoria del chat.
        
        Args:
            user_id: Identificador √∫nico del usuario
            memory_file: Archivo para persistir la memoria
        """
        self.user_id = user_id
        self.memory_file = memory_file
        self.context = {
            'last_category': None,          # √öltima categor√≠a consultada
            'preferred_services': [],       # Servicios que el usuario prefiere
            'last_interaction': None,       # Fecha de la √∫ltima interacci√≥n
            'interaction_count': 0,         # N√∫mero total de interacciones
            'known_addresses': [],          # Direcciones conocidas del usuario
            'preferred_payment_method': None,# M√©todo de pago preferido
            'conversation_history': []      # Historial de la conversaci√≥n (√∫ltimos 10 mensajes)
        }
        self._load_memory()
    
    def _load_memory(self) -> None:
        """Carga la memoria desde el archivo si existe."""
        try:
            if os.path.exists(self.memory_file):
                with open(self.memory_file, 'rb') as f:
                    saved_memory = pickle.load(f)
                    if self.user_id in saved_memory:
                        self.context = saved_memory[self.user_id]
        except Exception as e:
            logger.error(f"Error al cargar la memoria: {str(e)}")
    
    def _save_memory(self) -> None:
        """Guarda la memoria en el archivo."""
        try:
            all_memories = {}
            if os.path.exists(self.memory_file):
                with open(self.memory_file, 'rb') as f:
                    all_memories = pickle.load(f)
            
            all_memories[self.user_id] = self.context
            
            with open(self.memory_file, 'wb') as f:
                pickle.dump(all_memories, f)
        except Exception as e:
            logger.error(f"Error al guardar la memoria: {str(e)}")
    
    def update_last_category(self, category: str) -> None:
        """Actualiza la √∫ltima categor√≠a consultada."""
        self.context['last_category'] = category
        self._update_interaction()
    
    def get_last_category(self) -> Optional[str]:
        """Obtiene la √∫ltima categor√≠a consultada."""
        return self.context.get('last_category')
    
    def add_preferred_service(self, service: str) -> None:
        """A√±ade un servicio a los preferidos del usuario."""
        if service not in self.context['preferred_services']:
            self.context['preferred_services'].append(service)
            self._update_interaction()
    
    def get_preferred_services(self) -> List[str]:
        """Obtiene los servicios preferidos del usuario."""
        return self.context.get('preferred_services', [])
    
    def set_payment_method(self, method: str) -> None:
        """Establece el m√©todo de pago preferido."""
        self.context['preferred_payment_method'] = method
        self._update_interaction()
    
    def add_known_address(self, address: str) -> None:
        """A√±ade una direcci√≥n a las conocidas."""
        if address and address not in self.context['known_addresses']:
            self.context['known_addresses'].append(address)
            self._update_interaction()
    
    def get_known_addresses(self) -> List[str]:
        """Obtiene las direcciones conocidas."""
        return self.context.get('known_addresses', [])
    
    def add_to_history(self, role: str, message: str) -> None:
        """A√±ade un mensaje al historial de la conversaci√≥n."""
        self.context['conversation_history'].append({
            'role': role,
            'message': message,
            'timestamp': datetime.now().isoformat()
        })
        # Mantener solo los √∫ltimos 10 mensajes
        self.context['conversation_history'] = self.context['conversation_history'][-10:]
        self._update_interaction()
    
    def get_recent_history(self, limit: int = 5) -> List[Dict]:
        """Obtiene el historial reciente de la conversaci√≥n."""
        return self.context.get('conversation_history', [])[-limit:]
    
    def _update_interaction(self) -> None:
        """Actualiza el contador y la fecha de la √∫ltima interacci√≥n."""
        self.context['last_interaction'] = datetime.now().isoformat()
        self.context['interaction_count'] = self.context.get('interaction_count', 0) + 1
        self._save_memory()

# Inicializar la memoria del chat
chat_memory = ChatMemory(user_id="default")

def get_chat_response(message: str, intents: List[Dict[str, Any]], user_id: str = "default") -> str:
    """
    Obtiene una respuesta para un mensaje del chat, usando primero las intenciones
    y luego el modelo de lenguaje si es necesario.
    
    Args:
        message (str): Mensaje del usuario
        intents (List[Dict]): Lista de intenciones definidas
        user_id (str): Identificador √∫nico del usuario
        
    Returns:
        str: Respuesta generada
    """
    global chat_memory
    
    # Actualizar la memoria con el mensaje del usuario
    chat_memory.add_to_history('user', message)
    
    if not message or not isinstance(message, str):
        return "Por favor, proporciona un mensaje v√°lido."
        
    logger.info(f"Procesando mensaje: {message}")
    message_lower = message.lower().strip()
    
    # Cargar informaci√≥n de la empresa para usar en las respuestas
    empresa_info = cargar_info_empresa()
    telefono_contacto = empresa_info.get('telefono_contacto', 'el n√∫mero de soporte')
    
    try:
        # Verificar si el mensaje est√° vac√≠o o es solo espacios
        if not message_lower:
            return "No he recibido tu mensaje. ¬øEn qu√© puedo ayudarte hoy?"
            
        # Manejar saludos
        if any(saludo in message_lower for saludo in ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches']):
            saludos = [
                f"¬°Hola! Bienvenido a {empresa_info['nombre']}. ¬øEn qu√© puedo ayudarte hoy?",
                f"¬°Hola! Soy el asistente de {empresa_info['nombre']}. ¬øEn qu√© te puedo ayudar?",
                f"¬°Buen d√≠a! ¬øEn qu√© puedo asistirte hoy?"
            ]
            return random.choice(saludos)
            
        # Manejar despedidas
        if any(despedida in message_lower for despedida in ['adi√≥s', 'hasta luego', 'chao', 'nos vemos', 'gracias']):
            despedidas = [
                "¬°Gracias por contactarnos! Que tengas un excelente d√≠a.",
                "¬°Hasta luego! Si tienes m√°s preguntas, no dudes en consultarnos.",
                "¬°Fue un placer ayudarte! Que tengas un gran d√≠a."
            ]
            return random.choice(despedidas)
        
        # Manejar consultas sobre internet lento
        if any(palabra in message_lower for palabra in ['lento', 'lenta', 'despacio', 'velocidad baja', 'carga lenta', 'buffering', 'se traba']):
            # Primero ofrecer soluciones para internet lento
            return _obtener_solucion_falla(message_lower)
            
        # Mapeo de categor√≠as a sus respectivas funciones y nombres de categor√≠a
        categorias = {
            '1': (_obtener_planes_internet_residencial, 'residencial'),
            'internet residencial': (_obtener_planes_internet_residencial, 'residencial'),
            'residencial': (_obtener_planes_internet_residencial, 'residencial'),
            '2': (_obtener_planes_internet_empresarial, 'empresarial'),
            'internet empresarial': (_obtener_planes_internet_empresarial, 'empresarial'),
            'empresarial': (_obtener_planes_internet_empresarial, 'empresarial'),
            '3': (_obtener_planes_telefonia, 'telefon√≠a'),
            'telefon√≠a': (_obtener_planes_telefonia, 'telefon√≠a'),
            'telefonia': (_obtener_planes_telefonia, 'telefon√≠a'),
            'telefon√≠a ip': (_obtener_planes_telefonia, 'telefon√≠a'),
            'telefonia ip': (_obtener_planes_telefonia, 'telefon√≠a'),
            '4': (_obtener_planes_videovigilancia, 'videovigilancia'),
            'videovigilancia': (_obtener_planes_videovigilancia, 'videovigilancia'),
            'c√°maras': (_obtener_planes_videovigilancia, 'videovigilancia'),
            'camaras': (_obtener_planes_videovigilancia, 'videovigilancia'),
            'seguridad': (_obtener_planes_videovigilancia, 'videovigilancia')
        }
        
        # Manejar consultas sobre categor√≠as de servicios
        if any(palabra in message_lower for palabra in ['qu√© planes tienes', 'que planes tienes', 'qu√© servicios ofrecen', 'que servicios ofrecen', 
                                                       'qu√© categor√≠as manejan', 'que categorias manejan', 'tipos de planes', 'qu√© otros planes', 'que otros planes']):
            # Verificar si el mensaje contiene una categor√≠a espec√≠fica
            for key, (func, nombre_categoria) in categorias.items():
                if key in message_lower and key.isalpha():  # Solo para nombres de categor√≠a, no n√∫meros
                    # Actualizar la memoria con la categor√≠a seleccionada
                    chat_memory.update_last_category(nombre_categoria)
                    chat_memory.context['categoria_actual'] = nombre_categoria
                    return func()
            
            # Si no se mencion√≥ una categor√≠a espec√≠fica, mostrar todas las categor√≠as
            return _obtener_categorias_servicios()
        
        # Manejar solicitud espec√≠fica de planes de internet empresarial
        if any(palabra in message_lower for palabra in ['planes de internet empresarial', 'internet empresarial', 'planes empresariales', 'empresarial']):
            chat_memory.update_last_category('empresarial')
            chat_memory.context['categoria_actual'] = 'empresarial'
            return _obtener_planes_internet_empresarial()
            
        # Si no se encontr√≥ una categor√≠a espec√≠fica, verificar si se est√° pidiendo ver planes
        if any(palabra in message_lower for palabra in ['ver planes', 'mostrar planes', 'planes de internet', 'planes']):
            # Usar la √∫ltima categor√≠a consultada o mostrar opciones
            ultima_categoria = chat_memory.context.get('categoria_actual') or chat_memory.get_last_category()
            
            if ultima_categoria and ultima_categoria in [v[1] for v in categorias.values()]:
                # Obtener la funci√≥n correspondiente a la √∫ltima categor√≠a
                for key, (func, cat) in categorias.items():
                    if cat == ultima_categoria:
                        # Actualizar la categor√≠a actual en el contexto
                        chat_memory.context['categoria_actual'] = ultima_categoria
                        return func()
            
            # Si no hay categor√≠a reciente o no se encontr√≥, mostrar opciones
            return _obtener_categorias_servicios()
            
        # Manejar consultas sobre planes de internet espec√≠ficamente
        if any(palabra in message_lower for palabra in ['plan', 'planes', 'internet', 'conexi√≥n', 'conexion']):
            # Verificar si se pregunta por el plan m√°s b√°sico o econ√≥mico
            if any(palabra in message_lower for palabra in ['m√°s econ√≥mico', 'mas economico', 'm√°s barato', 'mas barato', 'menor precio', 'm√°s b√°sico', 'mas basico']):
                return _obtener_plan_economico()
            # Verificar si se pregunta por el plan con mayor velocidad
            elif any(palabra in message_lower for palabra in ['mayor velocidad', 'm√°s r√°pido', 'mas rapido', 'm√°xima velocidad', 'maxima velocidad']):
                return _obtener_plan_maxima_velocidad()
            # Si no es una consulta espec√≠fica, devolver todos los planes
            else:
                respuesta = _generar_respuesta_planes_internet()
                return respuesta.replace('\r\n', '\n').replace('\n', '\r\n')
        # Manejar consultas sobre horarios de atenci√≥n
        if any(palabra in message_lower for palabra in ['horario', 'horarios', 'atenci√≥n', 'atencion', 'abierto', 'cierran', 'abren', 'disponible', 'oficina', 'sucursal']):
            return _obtener_horarios_atencion()
        
        # Manejar consultas sobre emergencias
        if any(palabra in message_lower for palabra in ['emergencia', 'urgencia', 'falla grave', 'problema urgente', 'fuera de horario']):
            return (
                "üö® *Soporte de Emergencia 24/7* üö®\r\n\r\n"
                "Para reportar una emergencia t√©cnica fuera del horario de atenci√≥n, comun√≠cate a:\r\n\r\n"
                "üìû *Tel√©fono de Emergencias*: 55-9999-8888\r\n\r\n"
                "*Nota*: Este servicio est√° disponible las 24 horas solo para:\r\n"
                "‚Ä¢ Fallas totales del servicio\r\n"
                "‚Ä¢ Problemas cr√≠ticos que afecten a m√∫ltiples usuarios\r\n"
                "‚Ä¢ Situaciones de seguridad\r\n\r\n"
                "Para consultas generales, te atenderemos en nuestro horario habitual de atenci√≥n. üòä"
            )
        
        # Manejar consultas sobre sucursales
        if any(palabra in message_lower for palabra in ['sucursal', 'sucursales', 'oficina', 'oficinas', 'direcci√≥n', 'direccion', 'ubicaci√≥n', 'ubicacion', 'd√≥nde est√°n', 'donde estan']):
            # Extraer el nombre de la sucursal si se menciona
            sucursales = ['santiago', 'tianguistenco', 'santa', 'monica', 'cholula', 'morelos', 'santander', 'fedex']
            sucursal_buscada = next((s for s in sucursales if s in message_lower), None)
            return _obtener_informacion_sucursales(sucursal_buscada)
            
        # Funci√≥n auxiliar para manejar la contrataci√≥n de un plan espec√≠fico
        def manejar_contratacion(plan_seleccionado=None):
            # Obtener la categor√≠a de la memoria o usar la predeterminada
            ultima_categoria = chat_memory.get_last_category() or 'internet residencial'
            
            # Intentar obtener la ubicaci√≥n por IP
            resultado_ubicacion = _obtener_direccion_por_ip()
            
            # Construir la respuesta con la ubicaci√≥n detectada
            respuesta = [
                f"¬°Excelente elecci√≥n! Estamos verificando la cobertura para el servicio de {ultima_categoria} "
            ]
            
            # Si se especific√≥ un plan, a√±adirlo al mensaje
            if plan_seleccionado:
                respuesta.append(f"del plan de {plan_seleccionado} ")
                chat_memory.context['ultimo_plan_consultado'] = plan_seleccionado
            
            respuesta.extend([
                f"en tu zona...\r\n\r\n",
                f"{resultado_ubicacion['mensaje']}\r\n\r\n"
            ])
            
            # Si hay una categor√≠a de consulta previa, mencionarla
            respuesta.append(f"*Servicio seleccionado:* {ultima_categoria.capitalize()}\r\n")
            if plan_seleccionado:
                respuesta.append(f"*Plan seleccionado:* {plan_seleccionado}\r\n")
            respuesta.append("\r\n")
                
            respuesta.append(
                "Una vez confirmada la disponibilidad, podremos agendar la instalaci√≥n en la fecha que mejor te convenga. "
                "La instalaci√≥n generalmente se realiza en un plazo de 2 a 3 d√≠as h√°biles.\r\n\r\n"
            )
            
            # Si se detect√≥ una direcci√≥n, guardarla en la memoria
            if resultado_ubicacion['exito'] and 'ciudad' in resultado_ubicacion:
                direccion = f"{resultado_ubicacion['ciudad']}, {resultado_ubicacion['estado']}, {resultado_ubicacion['pais']}"
                chat_memory.add_known_address(direccion)
            
            # Si se pudo detectar la ubicaci√≥n, agregar el formulario de contrataci√≥n
            if resultado_ubicacion['exito']:
                respuesta.extend([
                    "üîπ *Formulario de Contrataci√≥n* üîπ\r\n\r\n",
                    "Por favor, completa el siguiente formulario para continuar con tu solicitud:\r\n\r\n",
                    "1. *Nombre completo*\r\n",
                    "2. *Tel√©fono de contacto*\r\n",
                    "3. *Correo electr√≥nico*\r\n",
                    "4. *Direcci√≥n exacta de instalaci√≥n*\r\n",
                    "5. *C√≥digo postal*\r\n\r\n"
                ])
                
                # Si hay una direcci√≥n detectada, mostrarla
                if 'ciudad' in resultado_ubicacion:
                    respuesta.extend([
                        "*Ubicaci√≥n detectada autom√°ticamente:*\r\n",
                        f"üìç {resultado_ubicacion['ciudad']}, {resultado_ubicacion['estado']}, {resultado_ubicacion['pais']}\r\n\r\n",
                        "¬øDeseas continuar con esta ubicaci√≥n? (S√≠/No)\r\n\r\n"
                    ])
                
                respuesta.extend([
                    "O si prefieres, puedes proporcionar los datos manualmente.\r\n\r\n",
                    "*Nota*: Un asesor se pondr√° en contacto contigo para confirmar los detalles de tu contrataci√≥n."
                ])
            
            return ''.join(respuesta)
        
        def obtener_planes_disponibles() -> list:
            """Obtiene la lista de planes disponibles con sus precios."""
            # Obtener la categor√≠a actual o usar la predeterminada
            categoria = chat_memory.get_last_category() or 'residencial'
            
            # Obtener los planes para la categor√≠a actual
            planes = _obtener_planes_por_categoria(categoria)
            
            # Si no hay planes para la categor√≠a, buscar en todas las categor√≠as
            if not planes:
                planes = []
                for cat in ['residencial', 'empresarial', 'telefonia', 'videovigilancia']:
                    planes.extend(_obtener_planes_por_categoria(cat) or [])
            
            return planes
            
        def buscar_plan_por_precio(mensaje: str) -> Optional[dict]:
            """Busca un plan por el precio mencionado en el mensaje."""
            # Buscar cantidades de dinero en el mensaje (ej: $500, 500 pesos, 500 mxn)
            patron_precio = r'\$?\s*(\d+(?:[.,]\d+)?)\s*(?:pesos?|mxn|d√≥lares?|dolares?|USD)?'
            coincidencias = re.findall(patron_precio, mensaje.lower())
            
            if not coincidencias:
                return None
                
            # Obtener todos los planes disponibles
            planes = obtener_planes_disponibles()
            
            # Buscar coincidencias de precio
            for precio_str in coincidencias:
                try:
                    # Convertir el precio a float, manejando tanto . como , como separador decimal
                    precio = float(precio_str.replace(',', '.'))
                    
                    # Buscar el plan con el precio m√°s cercano (dentro de un margen del 10%)
                    mejor_coincidencia = None
                    mejor_diferencia = float('inf')
                    
                    for plan in planes:
                        if 'precio' in plan:
                            try:
                                precio_plan = float(str(plan['precio']).replace('$', '').replace(',', '').strip())
                                diferencia = abs(precio_plan - precio)
                                
                                # Si la diferencia es menor al 10% del precio mencionado
                                if diferencia < (precio * 0.1) and diferencia < mejor_diferencia:
                                    mejor_coincidencia = plan
                                    mejor_diferencia = diferencia
                            except (ValueError, TypeError):
                                continue
                    
                    if mejor_coincidencia:
                        return mejor_coincidencia
                        
                except (ValueError, TypeError):
                    continue
                    
            return None
            
        def normalizar_velocidad(texto_velocidad: str) -> str:
            """Normaliza diferentes formatos de velocidad a un formato est√°ndar."""
            # Si ya es un diccionario (plan encontrado por precio), devolver la velocidad formateada
            if isinstance(texto_velocidad, dict) and 'velocidad' in texto_velocidad:
                return texto_velocidad['velocidad']
                
            # Convertir a min√∫sculas y quitar espacios
            texto = str(texto_velocidad).lower().replace(' ', '')
            
            # Mapeo de sin√≥nimos
            sinonimos = {
                'mbps': 'Mbps',
                'mb': 'Mbps',
                'megas': 'Mbps',
                'mega': 'Mbps',
                'gbps': 'Gbps',
                'gb': 'Gbps',
                'gigas': 'Gbps',
                'giga': 'Gbps'
            }
            
            # Buscar patrones como "100mb", "500 mbps", "1 gb", etc.
            patron = r'(\d+)(mbps?|gbps?|megas?|gigas?)'
            coincidencia = re.search(patron, texto)
            
            if coincidencia:
                numero = coincidencia.group(1)
                unidad = coincidencia.group(2)
                
                # Normalizar la unidad
                for key, valor in sinonimos.items():
                    if key in unidad:
                        unidad = valor
                        break
                
                # Convertir todo a Mbps para comparaci√≥n
                if 'Gbps' in unidad:
                    valor_mbps = float(numero) * 1000
                    # Si es menor a 1000, mostrarlo en Mbps, de lo contrario en Gbps
                    if valor_mbps < 1000:
                        return f"{int(valor_mbps)} Mbps"
                    else:
                        return f"{numero} {unidad}"
                else:
                    return f"{numero} {unidad}"
            
            return texto_velocidad  # Retornar el texto original si no se pudo normalizar
        
        # Manejar intenci√≥n de contrataci√≥n de un plan espec√≠fico (ej: "quiero contratar el de 200 megas" o "quiero el plan de $500")
        if any(palabra in message_lower for palabra in ['contratar', 'quiero contratar', 'deseo contratar', 'me interesa contratar', 'quiero el plan de', 'quiero el de', 'el de']):
            import re
            
            # 1. Verificar si hay un plan en el historial reciente
            ultimo_plan = chat_memory.context.get('ultimo_plan_consultado')
            if ultimo_plan and isinstance(ultimo_plan, dict):
                # Usar la categor√≠a del √∫ltimo plan consultado
                categoria_actual = ultimo_plan.get('categoria', 'residencial')
                logger.info(f"Usando categor√≠a del √∫ltimo plan consultado: {categoria_actual}")
                return manejar_contratacion(plan_seleccionado=f"{ultimo_plan.get('nombre', '')} - {ultimo_plan.get('velocidad', '')} - {ultimo_plan.get('precio', '')}")
            
            # 2. Si no hay un plan reciente, verificar el contexto de la conversaci√≥n
            categoria_actual = chat_memory.context.get('categoria_actual') or chat_memory.get_last_category() or 'residencial'
            logger.info(f"Categor√≠a actual para contrataci√≥n: {categoria_actual}")
            
            # 3. Forzar categor√≠a empresarial si se menciona en el mensaje o en el contexto
            if 'empresarial' in message_lower or 'empresarial' in categoria_actual.lower():
                categoria_actual = 'empresarial'
                logger.info("Forzando categor√≠a empresarial por contexto")
            
            # 4. Obtener planes de la categor√≠a actual
            logger.info(f"Buscando planes en la categor√≠a: {categoria_actual}")
            planes_categoria = _obtener_planes_por_categoria(categoria_actual)
            
            # Primero, buscar si se menciona un precio espec√≠fico
            plan_por_precio = buscar_plan_por_precio(message_lower)
            if plan_por_precio:
                # Guardar el plan completo en el contexto
                chat_memory.context['ultimo_plan_consultado'] = plan_por_precio
                chat_memory.context['ultima_categoria_consulta'] = categoria_actual
                return manejar_contratacion(plan_seleccionado=f"{plan_por_precio.get('nombre', '')} - {plan_por_precio.get('velocidad', '')} - {plan_por_precio.get('precio', '')}")
            
            # Si no se encontr√≥ por precio, buscar por velocidad
            patron_velocidad = r'(\d+\s*(?:mbps?|gbps?|megas?|gigas?|mega|giga|mb|gb))'
            coincidencias = re.finditer(patron_velocidad, message_lower, re.IGNORECASE)
            
            # Procesar todas las coincidencias
            velocidades_encontradas = []
            for match in coincidencias:
                velocidad = match.group(1).strip()
                velocidad_normalizada = normalizar_velocidad(velocidad)
                velocidades_encontradas.append(velocidad_normalizada)
            
            # Si se encontraron velocidades, buscar coincidencia en la categor√≠a actual
            if velocidades_encontradas:
                logger.info(f"Buscando planes de {categoria_actual} que coincidan con velocidades: {velocidades_encontradas}")
                
                # Funci√≥n para verificar si una velocidad coincide con un plan
                def velocidad_coincide(plan_velocidad, velocidades_buscadas):
                    plan_velocidad = str(plan_velocidad or '').lower().replace(' ', '')
                    for velocidad in velocidades_buscadas:
                        velocidad = velocidad.lower().replace(' ', '')
                        # Verificar coincidencia exacta o si la velocidad del plan contiene la buscada
                        if (velocidad in plan_velocidad) or (plan_velocidad in velocidad):
                            return True
                        # Verificar si son num√©ricamente iguales (ej: '100' en '100mbps')
                        try:
                            num_buscado = int(''.join(filter(str.isdigit, velocidad)))
                            num_plan = int(''.join(filter(str.isdigit, plan_velocidad)))
                            if num_buscado == num_plan:
                                return True
                        except:
                            continue
                    return False
                
                # Buscar planes que coincidan con la velocidad solicitada
                if isinstance(planes_categoria, list):
                    for plan in planes_categoria:
                        plan_velocidad = plan.get('velocidad', '')
                        if velocidad_coincide(plan_velocidad, velocidades_encontradas):
                            logger.info(f"Plan encontrado en {categoria_actual}: {plan.get('nombre')} - {plan_velocidad}")
                            # Guardar el plan completo en el contexto con su categor√≠a
                            plan_con_categoria = plan.copy()
                            plan_con_categoria['categoria'] = categoria_actual
                            chat_memory.context['ultimo_plan_consultado'] = plan_con_categoria
                            chat_memory.context['categoria_actual'] = categoria_actual
                            return manejar_contratacion(plan_seleccionado=f"{plan.get('nombre', '')} - {plan_velocidad} - {plan.get('precio', '')}")
                
                # Si no se encontr√≥ coincidencia exacta, buscar en todas las categor√≠as
                logger.info(f"No se encontr√≥ coincidencia exacta en {categoria_actual}, buscando en todas las categor√≠as")
                for cat in ['residencial', 'empresarial', 'telefon√≠a', 'videovigilancia']:
                    if cat == categoria_actual:
                        continue  # Ya buscamos aqu√≠
                        
                    planes = _obtener_planes_por_categoria(cat)
                    if isinstance(planes, list):
                        for plan in planes:
                            plan_velocidad = plan.get('velocidad', '')
                            if velocidad_coincide(plan_velocidad, velocidades_encontradas):
                                logger.info(f"Plan encontrado en {cat}: {plan.get('nombre')} - {plan_velocidad}")
                                chat_memory.context['ultimo_plan_consultado'] = plan
                                chat_memory.context['ultima_categoria_consulta'] = cat
                                return manejar_contratacion(plan_seleccionado=f"{plan.get('nombre', '')} - {plan_velocidad} - {plan.get('precio', '')}")
            
            # Si no se encontr√≥ coincidencia, verificar si hay un plan en el historial reciente
            ultimo_plan = chat_memory.context.get('ultimo_plan_consultado')
            if ultimo_plan:
                if isinstance(ultimo_plan, dict):
                    return manejar_contratacion(plan_seleccionado=f"{ultimo_plan.get('nombre', '')} - {ultimo_plan.get('velocidad', '')} - {ultimo_plan.get('precio', '')}")
                return manejar_contratacion(plan_seleccionado=ultimo_plan)
            
            # Si no hay plan espec√≠fico, continuar con la contrataci√≥n normal
            logger.info("No se encontr√≥ plan espec√≠fico, iniciando contrataci√≥n gen√©rica")
            return manejar_contratacion()
            
        # Manejar consultas sobre planes espec√≠ficos (sin intenci√≥n de contratar)
        if any(palabra in message_lower for palabra in ['plan de', 'plan de', 'cu√°nto cuesta', 'cuanto cuesta', 'qu√© incluye', 'que incluye']):
            # Obtener la categor√≠a actual o usar 'residencial' como predeterminada
            categoria_actual = chat_memory.get_last_category() or 'residencial'
            
            # Buscar si se menciona un precio espec√≠fico
            plan_por_precio = buscar_plan_por_precio(message_lower)
            if plan_por_precio:
                # Mostrar solo los detalles del plan sin iniciar el proceso de contrataci√≥n
                return _obtener_planes_por_categoria(categoria_actual)
                    
            # Si no se encontr√≥ por precio, buscar por velocidad
            patron_velocidad = r'(\d+\s*(?:mbps?|gbps?|megas?|gigas?|mega|giga|mb|gb))'
            if re.search(patron_velocidad, message_lower, re.IGNORECASE):
                # Mantener la categor√≠a actual al mostrar los planes
                return _obtener_planes_por_categoria(categoria_actual)
            
        # Manejar consultas sobre m√©todos de pago
        if any(palabra in message_lower for palabra in ['m√©todo de pago', 'metodo de pago', 'formas de pago', 'c√≥mo pagar', 'como pagar', 'd√≥nde pagar', 'donde pagar', 'n√∫mero de cuenta', 'numero de cuenta', 'clabe', 'transferencia', 'dep√≥sito', 'deposito', 'oxxo', 'farmacias del ahorro']):
            # Verificar si el usuario mencion√≥ un m√©todo de pago espec√≠fico
            metodos_pago = ['tarjeta', 'efectivo', 'transferencia', 'dep√≥sito', 'oxxo', 'farmacias del ahorro']
            for metodo in metodos_pago:
                if metodo in message_lower:
                    chat_memory.set_payment_method(metodo)
                    break
                    
            return _obtener_metodos_pago()
            
        # Manejar consultas sobre fechas de pago
        if any(palabra in message_lower for palabra in ['cu√°ndo pagar', 'cuando pagar', 'fecha de pago', 'fecha l√≠mite', 'fecha limite', 'vencimiento', 'cu√°ndo vence', 'cuando vence']):
            return (
                "üìÖ *‚Ä¢‚Ä¢‚Ä¢ FECHAS DE PAGO ‚Ä¢‚Ä¢‚Ä¢* üìÖ\r\n\r\n"
                "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n\r\n"
                "üìÜ *PER√çODO DE FACTURACI√ìN*\r\n"
                "   Del 1ro al 5 de cada mes\r\n\r\n"
                "üí° *RECOMENDACIONES*\r\n"
                "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\r\n"
                "   ‚Ä¢ ‚è∞ Realiza tu pago con anticipaci√≥n para evitar cargos por mora.\r\n"
                "   ‚Ä¢ Guarda tu comprobante de pago por cualquier aclaraci√≥n.\r\n\r\n"
                "üí≠ *¬øNecesitas informaci√≥n sobre los m√©todos de pago disponibles?*"
                )
                
        # Buscar coincidencias exactas en los patrones de las intenciones
        for intent in intents:
            if not isinstance(intent, dict):
                continue
                
            try:
                patterns = intent.get('patterns', [])
                if not patterns or not isinstance(patterns, list):
                    continue
                    
                # Primero verificar coincidencia exacta
                if message_lower in [p.lower() for p in patterns]:
                    logger.info(f"Coincidencia exacta encontrada para: {message}")
                    responses = intent.get('responses', [])
                    if responses and isinstance(responses, list) and responses:
                        return random.choice(responses)
                    break
            except Exception as e:
                logger.error(f"Error al buscar en intenciones: {str(e)}\n{traceback.format_exc()}")
        
        # Si no se encontr√≥ coincidencia en las intenciones, intentar usar el modelo de lenguaje
        try:
            # Obtener contexto relevante de la memoria
            contexto_usuario = []
            
            # A√±adir servicios preferidos si existen
            servicios_preferidos = chat_memory.get_preferred_services()
            if servicios_preferidos:
                contexto_usuario.append(f"El usuario ha mostrado inter√©s en: {', '.join(servicios_preferidos)}.")
            
            # A√±adir m√©todo de pago preferido si existe
            if chat_memory.context.get('preferred_payment_method'):
                contexto_usuario.append(f"M√©todo de pago preferido: {chat_memory.context['preferred_payment_method']}.")
            
            # A√±adir historial reciente de la conversaci√≥n
            historial_reciente = chat_memory.get_recent_history(3)  # √öltimos 3 mensajes
            if historial_reciente:
                contexto_usuario.append("Historial reciente de la conversaci√≥n:")
                for msg in historial_reciente:
                    rol = "Usuario" if msg['role'] == 'user' else "Asistente"
                    contexto_usuario.append(f"- {rol}: {msg['message']}")
            
            # Crear un prompt de sistema que incluya informaci√≥n de la empresa y contexto del usuario
            system_prompt = (
                f"Eres un asistente de {empresa_info['nombre']}, una empresa de servicios de internet.\n"
                f"Horario de atenci√≥n: {empresa_info['horario_atencion']}.\n"
                f"Tel√©fono de contacto: {telefono_contacto}.\n"
                "S√© amable, conciso y profesional en tus respuestas.\n"
                "Si no est√°s seguro de algo, ofrece contactar al soporte t√©cnico.\n\n"
                "Informaci√≥n importante sobre nuestros servicios:\n"
                "- Ofrecemos planes de internet residencial desde 50 Mbps hasta 1 Gbps\n"
                "- Brindamos soporte t√©cnico 24/7 para todos nuestros clientes\n\n"
                "Contexto del usuario:\n" + "\n".join(contexto_usuario)
            )
            
            # Usar el modelo para generar una respuesta
            response = llm_handler.get_response(
                user_message=message,
                system_prompt=system_prompt,
                use_streaming=False
            )
            
            # Guardar la respuesta en el historial
            if response:
                chat_memory.add_to_history('assistant', response)
                return response
            else:
                return "No pude generar una respuesta. ¬øPodr√≠as reformular tu pregunta?"
            
        except Exception as e:
            logger.error(f"Error al generar respuesta con el modelo: {str(e)}\n{traceback.format_exc()}")
            return ("Lo siento, estoy teniendo dificultades para procesar tu solicitud. "
                    f"Ponte en contacto con nuestro equipo de soporte al {telefono_contacto}.")
        
    except Exception as e:
        logger.error(f"Error inesperado en get_chat_response: {str(e)}\n{traceback.format_exc()}")
        return "Lo siento, ha ocurrido un error inesperado. Por favor, int√©ntalo de nuevo m√°s tarde."